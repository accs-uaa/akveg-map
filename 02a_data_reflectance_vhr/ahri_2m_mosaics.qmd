---
title: "ingest_ahri_2m"
format: html
editor: source
---

## Ingested raw tiles at 2m using REST requests 
Maximum tile size 15000x4100 pixels

```{bash}
cd /data/gis/raster_base/Alaska/AKVegMap/AHRI/AHRI_2020
conda activate cog

gdalbuildvrt AHRI2020_2m_nome_beaver.vrt ahri_2020_2m/AHRI2020_2m_R08*.tif

gdal_translate AHRI2020_2m_nome_beaver.vrt ahri_2020_2m_cog/AHRI2020_2m_nome_beaver.tif -of COG -co "OVERVIEWS=IGNORE_EXISTING" -co "RESAMPLING=AVERAGE" -co "COMPRESS=LZW" -co "PREDICTOR=YES" -co "BIGTIFF=IF_SAFER" -co "NUM_THREADS=10"
```


```{bash mosaic 100m NDVI normals}
cd /data/gis/raster_base/Alaska/AKVegMap/MODIS_Phenology/MCD43A4_V61_Normals
conda activate cog

gdalbuildvrt /data/gis/gis_base/GEE/GEE_Exports/2025_akveg/mcd43a4_061_ndvi_seasonal_doy_percentiles_v20250128_3338_100m.vrt mcd43a4_061_ndvi_seasonal_doy_percentiles_v20250128_3338_100m-*.tif

gdal_translate 

```

conda create -n gdal_cf
conda activate gdal_cf
conda config --env --add channels conda-forge
conda config --env --set channel_priority strict
conda install gdal

```{r setup python env}
library(reticulate)

# Specify the Conda environment
use_condaenv("gdal_cf", required = TRUE)

# Verify which Python is being used
py_config()
```

#Did not work in R, see:
01a_data_reflectance_vhr/mosaic_with_bands.ipynb instead
```{python}
import os
import glob
from osgeo import gdal

# Set directory and wildcard pattern
input_directory = "/data/gis/gis_base/GEE/GEE_Exports/2025_akveg"
wildcard = "mcd43a4_061_ndvi_seasonal_doy_percentiles_v20250128_3338_100m-*.tif"  # Change this to match your desired files
vrt_filename = os.path.join(input_directory, "mcd43a4_061_ndvi_seasonal_doy_percentiles_v20250128_3338_100m.vrt")

# Find matching TIFF files
tif_files = glob.glob(os.path.join(input_directory, wildcard))

# Check if any files were found
if not tif_files:
    print("‚ùå No matching TIFF files found!")
else:
    print(f"üü¢ Found {len(tif_files)} matching TIFF files.")

    # Build the VRT
    vrt_ds = gdal.BuildVRT(vrt_filename, tif_files, separate=False)

    # Preserve band names from the first file
    if vrt_ds:
        first_tif = tif_files[0]
        src_ds = gdal.Open(first_tif)
        
        for i in range(1, src_ds.RasterCount + 1):  # Loop through bands
            band_name = src_ds.GetRasterBand(i).GetDescription()  # Get band name
            if band_name:  # Only set if a name exists
                vrt_band = vrt_ds.GetRasterBand(i)
                vrt_band.SetMetadataItem("NAME", band_name)

        vrt_ds = None
        print(f"‚úÖ VRT created successfully with band names: {vrt_filename}")

    else:
        print("‚ùå VRT creation failed!")
```
